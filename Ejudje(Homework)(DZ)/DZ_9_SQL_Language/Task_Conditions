Язык SQL
Реализовать класс SQL_interp, выполняющий команды (запросы) на модельном языке SQL. Хранение данных в табличном виде - внутри класса. Предполагается, что таблица всего одна.

При этом сам модельный язык SQL должен быть задан при помощи грамматики. Грамматику вы должны разработать самостоятельно. Запись вашей грамматики прикрепите в moodle.

В классе должны быть следующие методы:

метод get_query() - считывание одной команды;
метод parse_query() - разбор команды, ее сохранение внутри класса в представлении, удобном для выполнения;
метод run_query() - выполнение команды;
метод print_db() - построчная распечатка таблицы БД
Реализовать команды создания таблицы и вставки строки:

Создание таблицы: CREATE TABLE tbl (название колонки 1, ..., название колонки N),
Вставка строки: INSERT INTO tbl (список названий колонок в любом порядке) VALUES(список значений)
Если в списке колонок команды INSERT INTO нет каких-либо колонок таблицы или есть несуществующие - кидается исключение. Если на момент вызова INSERT INTO таблица ещё не создана - также кидается исключение. Если в названии команды есть ошибки, также кидаем исключение. Считаем, что наша таблица всегда называется tbl.

Вместе с описанием класса код должен содержать функцию main следующего вида:


  int main()  

  {           

     try         

     {                

         SQL_interp sql;   

         while(sql.get_query())  

         {                       

           sql.parse_query();   

           sql.run_query();     

         }                 

         sql.print_db();   

     }          

     catch() {...}           

          ...             

    return 0;         

  }             

В функции main() catch один или несколько описать самостоятельно.

Input format

Ввод команд осуществляется последовательно, каждая команда на отдельной строке, ввод команд заканчивается когда встречается слово END

Output format

Метод print_db() печатает названия колонок через пробел в том порядке, в котором они были заданы командой CREATE TABLE. Вывод оставшейся части таблицы осуществляется построчно. На каждой строке печатаются значения ячеек соответствующих колонок через один пробел. Порядок ячеек в строке должен совпадать с порядком, в котором заданы названия колонок. Вывод осуществляется в stdout.

Правила работы программы в исключительных ситуациях следующие:

Если исключение произошло из-за вызова INSERT INTO раньше CREATE TABLE, то вывод: "Exception: No tables"
Если исключение произошло из-за присутствия лишней колонки, то вывод: "Exception: INSERT Error in %s column", где "%s" название колонки из-за которой произошло исключение.
В случаи ошибки в названиях нескольких колонках, осуществляется вывод названия первой неправильной колонки
Если исключение произошло из-за лишнего значения и (соответственно отсутствия колонки), то вывод: "Exception: INSERT Error in %s", где "%s" лишнее значение.
В случаи если лишних значений несколько, осуществляется вывод первого.
Если исключение произошло из-за некорректной команды, то вывод: "Exception: Wrong command %s", где "%s" одно слово, которое не соответствует ни одному ключевому слову языка
Во всех случаях вывод ошибок в stderr

Examples

Input

CREATE TABLE tbl (name, age)
INSERT INTO tbl (name, age) VALUES("John", "34")
INSERT INTO tbl (age, name) VALUES("45", "Jill")
END

Output

name age
John 34
Jill 45

Input

CREATE TABLE tbl (name)
INSERT INTO tbl (name, age) VALUES("Joshua", "45")
END

Output

Exception: INSERT Error in age column

Input

CREATE TABLE tbl (name)
INSERT INTO tbl (name) VALUES("Joshua", "45")
END

Output

Exception: INSERT Error in 45
